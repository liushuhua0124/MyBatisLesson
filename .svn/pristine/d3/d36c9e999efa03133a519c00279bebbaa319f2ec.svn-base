<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	 
<mapper namespace="cn.et.lesson04.xml.StudentMapper">

	<!-- if判断条件是否满足,满足就将if中的sql自动拼接到主sql上
		sql语句如果是like语句,用${},如果是=就用#{}
		
		where 自动判断第一个条件是否存在where,如果没有where,自动追加,同时去掉一个and
		trim 灵活度更高
			prefix:配置的参数会被添加在sql语句开始的地方
			prefixOverrides:sql语句开始出现的参数会被覆盖
			<trim prefix="where" prefixOverrides="and">效果就等于where
	 -->
	<select id="queryStudent" resultType="student">
		select * from student
		<trim prefix="where" prefixOverrides="and">
			<if test="sname!=null">
				and sname like '%${sname}%'
			</if>
			<if test="address!=null">
				and address like '%${address}%'
			</if>
		</trim>
	</select>
	
	
	<!-- 
		set标签动态去掉最后一个条件的
	 -->
	<update id="updateStudent">
		update student
		<set>
			<if test="sname!=null">
				sname=#{sname},
			</if>
			<if test="age!=null">
				age=#{age},
			</if>
			<if test="sex!=null">
				sex=#{sex}
			</if>
		</set>
		where sid = #{sid}
	</update>
	
	
	<!-- 
		foreach:
			open表示:循环开始之前追加的sql
			close表示:循环结束之后追加的sql
			collection表示:指定传入的值的集合
			item表示:临时变量(每一次循环的值被存储的变量名)
			separator表示:在之前加逗号,最后一个不加逗号(非最后一次的循环值上添加分隔符)
	 -->
	<select id="queryStudentByAnyGrade" resultType="student">
		select * from student
		<foreach item="gid" collection="gradeList" open="where gid in(" close=")" separator=",">
			#{gid}
		</foreach>
		
	</select>
	
	
	
	
	<select id="queryBySex" resultType="student">
		select * from student where 1=1
		<choose>
			<when test="sex!=null">
				and sex = #{sex}
			</when>
			<otherwise>
				and sex = '女'
			</otherwise>
		</choose>
	</select>
</mapper>